plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	forge {
		mixinConfig "mapsync.common.mixins.json", "mapsync.forge.mixins.json"
	}
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge("net.minecraftforge:forge:${rootProject.forge_version}")

	common(project(path: ":common", configuration: "namedElements"))
	shadowCommon(project(path: ":common", configuration: "transformProductionForge"))

	modCompileOnlyApi("maven.modrinth:journeymap:P9GgQSrA")
}

processResources {
	filesMatching("META-INF/mods.toml") {
		expand([
				"mod_issues_url": rootProject.mod_issues_url,
				"copyright_licence": rootProject.copyright_licence,

				"mod_version": rootProject.mod_version,
				"mod_description": rootProject.mod_description,
				"mod_home_url": rootProject.mod_home_url,

				"minecraft_version": rootProject.minecraft_version
		])
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = "forge"
}

jar {
	archiveClassifier = "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

tasks.register("cleanJar", Delete) {
	delete fileTree("../dist") {
		include "*-forge.jar"
	}
}

tasks.register("copyJar", Copy) {
	dependsOn cleanJar
	from remapJar
	into "../dist"
}

build.dependsOn copyJar
